Сущности

public class Employee
    {
        public int Id { get; set; }
        public int DepartmentId { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public double Salary { get; set; }

    }

    public class Department
    {
        public int Id { get; set; }
        public string Name { get; set; }

    }


var employes = new List<Employee>
            {
                new Employee { Id = 1, Age = 22, DepartmentId = 1, Name = "Vasya", Salary = 3000 },
                new Employee { Id = 2, Age = 25, DepartmentId = 1, Name = "Petya", Salary = 6000 },
                new Employee { Id = 3, Age = 23, DepartmentId = 1, Name = "Kolya", Salary = 8000 },
                new Employee { Id = 4, Age = 28, DepartmentId = 1, Name = "Michail", Salary = 11000 },
                new Employee { Id = 5, Age = 35, DepartmentId = 2, Name = "Kostya", Salary = 5000 },
                new Employee { Id = 6, Age = 33, DepartmentId = 1, Name = "Andrey", Salary = 7000 },
                new Employee { Id = 7, Age = 21, DepartmentId = 1, Name = "Oleg", Salary = 12000 },
                new Employee { Id = 8, Age = 20, DepartmentId = 1, Name = "Pavel", Salary = 11000 },
                new Employee { Id = 9, Age = 36, DepartmentId = 2, Name = "Maksim", Salary = 10000 },
                new Employee { Id = 10, Age = 45, DepartmentId = 2, Name = "Arseniy", Salary = 20000 },
                new Employee { Id = 11, Age = 41, DepartmentId = 3, Name = "Nekto", Salary = 99999999 }
            };

            var departments = new List<Department>
            {
                new Department { Id = 1, Name = "IT" },
                new Department { Id = 2, Name = "Management" }
            };



public class MusicContext : DbContext
    {
public OfficeContext() : base("name=OfficeContainer")
        { Database.SetInitializer(new MusicContextIntializer()); }

        public DbSet<Employee> Employees { get; set; }
        public DbSet<Department> Departments { get; set; }
        

	}

//Нужно вот такой вот поставить для двух классаов
	interface IRepository<T> : IDisposable 
        where T : class
{
    IEnumerable<T> GetBookList(); // получение всех объектов
    T GetBook(int id); // получение одного объекта по id
    void Create(T item); // создание объекта
    void Update(T item); // обновление объекта
    void Delete(int id); // удаление объекта по id
    void Save();  // сохранение изменений
}

    interface IEmployee : IDisposable
{
    IList<Employee> GetEmployeeList();
    Employee GetEmployee(int id);
    void Create(Employee emp);
    void Update(Employee item);
    void Delete(int id);
    void Save();
}

public class EmployeeRepository : IRepository<Employee>
{
    private OfficeContext db;
 
    public EmployeeRepository()
    {
        this.db = new OfficeContext();
    }
 
    public IList<Employee> GetEmployeeList()
    {
        return db.Employees;
    }
 
    public Employee GetEmployee(int id)
    {
        return db.Employees.Find(id);
    }
 
    public void Create(Employee emp)
    {
        db.Employees.Add(emp);
    }
 
    public void Update(Employee emp)
    {
        db.Entry(emp).State = EntityState.Modified;
    }
 
    public void Delete(int id)
    {
        Employee emp = db.Employees.Find(id);
        if(emp!=null)
            db.Employees.Remove(emp);
    }
 
    public void Save()
    {
        db.SaveChanges();
    }
 
    private bool disposed = false;
 
    public virtual void Dispose(bool disposing)
    {
        if(!this.disposed)
        {
            if(disposing)
            {
                db.Dispose();
            }
        }
        this.disposed = true;
    }
 
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
}